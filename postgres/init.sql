-- üîß ÏÇ¨Ïö©Ïûê Î∞è Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉùÏÑ±
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT FROM pg_database WHERE datname = 'stock_data') THEN
        CREATE DATABASE stock_data;
    END IF;
END $$;

DO $$ 
BEGIN
    IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'admin') THEN
        CREATE USER admin WITH ENCRYPTED PASSWORD 'securepassword';
        ALTER ROLE admin WITH SUPERUSER;
        GRANT ALL PRIVILEGES ON DATABASE stock_data TO admin;
    END IF;
END $$;

-- ‚úÖ DB Ïó∞Í≤∞
\c stock_data;

-- ‚úÖ Í¥ÄÏã¨ Ï¢ÖÎ™© ÌÖåÏù¥Î∏î
CREATE TABLE IF NOT EXISTS watchlist (
    id SERIAL PRIMARY KEY,
    ticker VARCHAR(10) UNIQUE NOT NULL,
    alias VARCHAR(50) DEFAULT '',
    is_active BOOLEAN DEFAULT TRUE,
    data_source VARCHAR(10) DEFAULT 'NAVER',
    is_open BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ‚úÖ Ïã§ÏãúÍ∞Ñ Í∞ÄÍ≤© Ï†ÄÏû• ÌÖåÏù¥Î∏î
CREATE TABLE IF NOT EXISTS stock_prices (
    id SERIAL PRIMARY KEY,
    ticker VARCHAR(20) NOT NULL,
    price NUMERIC(10, 2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_price_per_minute UNIQUE (ticker, created_at)
);

-- ‚úÖ ÏùºÎ≥Ñ Í∞ÄÍ≤© Ï†ÄÏû• ÌÖåÏù¥Î∏î
CREATE TABLE IF NOT EXISTS stock_daily_data (
    id SERIAL PRIMARY KEY,
    ticker VARCHAR(20) NOT NULL,
    price_date DATE NOT NULL,
    open_price NUMERIC(10, 2),
    high_price NUMERIC(10, 2),
    low_price NUMERIC(10, 2),
    close_price NUMERIC(10, 2),
    volume BIGINT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_daily UNIQUE (ticker, price_date)
);

-- ‚úÖ AI ÏòàÏ∏° Í≤∞Í≥º Ï†ÄÏû•
CREATE TABLE IF NOT EXISTS ai_predictions (
    id SERIAL PRIMARY KEY,
    ticker VARCHAR(20) NOT NULL,
    predicted_price NUMERIC(10,2) NOT NULL,
    prediction_period VARCHAR(10) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ‚úÖ Quant Î∂ÑÏÑù Í≤∞Í≥º Ï†ÄÏû•
CREATE TABLE IF NOT EXISTS quant_results (
    id SERIAL PRIMARY KEY,
    ticker VARCHAR(20) NOT NULL,
    analysis_result NUMERIC(10,2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ‚úÖ Ï£ºÏãù Í∑∏Î£π ÌÖåÏù¥Î∏î
CREATE TABLE IF NOT EXISTS stock_groups (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL
);

-- ‚úÖ Ï£ºÏãù Í∑∏Î£π Îß§Ìïë
CREATE TABLE IF NOT EXISTS stock_group_mapping (
    id SERIAL PRIMARY KEY,
    group_id INT REFERENCES stock_groups(id),
    ticker VARCHAR(20) REFERENCES watchlist(ticker)
);

-- ‚úÖ Í∏∞Î≥∏ Í∑∏Î£π Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
INSERT INTO stock_groups (name) VALUES
('AI Í¥ÄÎ†®'), 
('Î∞©ÏÇ∞ Í¥ÄÎ†®'), 
('IT ÎåÄÍ∏∞ÏóÖ'), 
('Î∞òÎèÑÏ≤¥') 
ON CONFLICT (name) DO NOTHING;

-- ‚úÖ Ï¥àÍ∏∞ Í¥ÄÏã¨ Ï¢ÖÎ™©
INSERT INTO watchlist (ticker, alias, is_active, data_source, is_open)
VALUES
    ('NVDL', 'NVIDIA ETF', TRUE, 'NAVER', TRUE),
    ('012450.KS', 'ÌïúÌôîÏóêÏñ¥Î°úÏä§ÌéòÏù¥Ïä§', TRUE, 'NAVER', TRUE),
    ('^IXIC', 'NASDAQ Composite', TRUE, 'NAVER', TRUE),
    ('^KQ11', 'KOSDAQ Index', TRUE, 'NAVER', TRUE),
    ('^GSPC', 'S&P 500', TRUE, 'NAVER', TRUE),
    ('AAPL', 'Apple Inc.', TRUE, 'NAVER', TRUE)
ON CONFLICT (ticker) DO NOTHING;
