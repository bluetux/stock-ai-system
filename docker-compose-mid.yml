# version: '3.8'

services:
  nginx:
    image: nginx:latest
    container_name: nginx
    networks:
      - stock-network
    ports:
      - "80:80" # 단일 포트 사용
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      # - jupyter
      # - comfy
    restart: always
  db:
    image: postgres
    container_name: db
    hostname: db
    build: ./postgres
    networks:
      - stock-network
    env_file:
      - ./postgres/.env
    user: "1001:1001"
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres/entrypoint.sh:/docker-entrypoint-initdb.d/entrypoint.sh
    deploy:
      resources:
        limits:
          memory: 2G
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      timeout: 5s
    restart: always

  collector:
    image: data-collector
    container_name: collector
    hostname: collector
    build: ./data-collector
    networks:
      - stock-network
    volumes:
      - ./data/raw:/data
      - ./data-collector:/app
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
  frontend:
    image: frontend-web
    container_name: frontend
    hostname: frontend
    build: ./frontend
    networks:
      - stock-network
    ports:
      - "5173:5173"
    environment:
      - NODE_OPTIONS=--openssl-legacy-provider
      - CHOKIDAR_USEPOLLING=true
      - HOST=0.0.0.0
    volumes:
      - ./frontend:/app
      # - /app/node_modules
    stdin_open: true
    tty: true
    restart: always
  web-api:
    image: web-api-backend
    container_name: web-api
    hostname: web-api
    build: ./web-api
    networks:
      - stock-network
    ports:
      - "8000:8000"
    volumes:
      - ./web-api:/app
    # environment:
    #   - PYTHONUNBUFFERED=1
    env_file:
      - .env
    depends_on:
      db:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
    restart: always

networks:
  stock-network:
    driver: bridge
